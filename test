-- // Library Tables
local library = {}
local utility = {}
local obelus = {
    connections = {}
}

-- // Services
local uis = game:GetService("UserInputService")
local cre = game:GetService("CoreGui")

-- // Indexing
library.__index = library

-- // Utility Functions
do
    function utility:Create(createInfo)
        local createInfo = createInfo or {}
        if createInfo.Type then
            local instance = Instance.new(createInfo.Type)
            if createInfo.Properties and typeof(createInfo.Properties) == "table" then
                for property, value in pairs(createInfo.Properties) do
                    instance[property] = value
                end
            end
            return instance
        end
    end

    function utility:Connection(connectionInfo)
        local connectionInfo = connectionInfo or {}
        if connectionInfo.Type then
            local connection = connectionInfo.Type:Connect(connectionInfo.Callback or function() end)
            obelus.connections[#obelus.connections + 1] = connection
            return connection
        end
    end

    function utility:RemoveConnection(connectionInfo)
        local connectionInfo = connectionInfo or {}
        if connectionInfo.Connection then
            local found = table.find(obelus.connections, connectionInfo.Connection)
            if found then
                connectionInfo.Connection:Disconnect()
                table.remove(obelus.connections, found)
            end
        end
    end
end

-- // UI Framework
do
    function library:Window(windowInfo)
        local info = windowInfo or {}
        local window = {Pages = {}, Dragging = false, Delta = UDim2.new(), Delta2 = Vector3.new()}

        local screen = utility:Create({Type = "ScreenGui", Properties = {
            Parent = cre,
            DisplayOrder = 8888,
            IgnoreGuiInset = true,
            Name = "obelus",
            ZIndexBehavior = "Global",
            ResetOnSpawn = false
        }})

        game:GetService("UserInputService").InputBegan:Connect(function(k, g)
            if not g and k.KeyCode == Enum.KeyCode.RightShift then 
                screen.Enabled = not screen.Enabled 
            end
        end)

        local main = utility:Create({Type = "Frame", Properties = {
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundColor3 = Color3.fromRGB(51, 51, 51),
            BorderSizePixel = 1,
            Parent = screen,
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Size = UDim2.new(0, 516, 0, 563)
        }})

        local frame = utility:Create({Type = "Frame", Properties = {
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundColor3 = Color3.fromRGB(12, 12, 12),
            BorderSizePixel = 0,
            Parent = main,
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Size = UDim2.new(1, -2, 1, -2),
        }})

        -- Draggable Window
        local draggingButton = utility:Create({Type = "TextButton", Properties = {
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Parent = frame,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(1, 0, 0, 24),
            Text = ""
        }})

        local title = utility:Create({Type = "TextLabel", Properties = {
            BackgroundTransparency = 1,
            Parent = frame,
            Position = UDim2.new(0, 9, 0, 6),
            Size = UDim2.new(1, -16, 0, 15),
            Font = "Code",
            RichText = true,
            Text = info.Name or "obelus",
            TextColor3 = Color3.fromRGB(142, 142, 142),
            TextSize = 13,
            TextXAlignment = "Left"
        }})

        -- Tab Holder
        local tabs = utility:Create({Type = "Frame", Properties = {
            BackgroundColor3 = Color3.fromRGB(1, 1, 1),
            Parent = frame,
            Position = UDim2.new(0, 8, 0, 29),
            Size = UDim2.new(1, -16, 0, 30)
        }})

        local pagesHolder = utility:Create({Type = "Frame", Properties = {
            BackgroundColor3 = Color3.fromRGB(51, 51, 51),
            Parent = frame,
            Position = UDim2.new(0, 8, 0, 65),
            Size = UDim2.new(1, -16, 1, -76)
        }})

        -- Functions
        function window:Page(pageInfo)
            local info = pageInfo or {}
            local page = {}
            local pageHolder = utility:Create({Type = "Frame", Properties = {
                BackgroundTransparency = 1,
                Parent = pagesHolder,
                Position = UDim2.new(0, 10, 0, 10),
                Size = UDim2.new(1, -20, 1, -20),
                Visible = false
            }})
            function page:Show(state)
                pageHolder.Visible = state
            end
            window.Pages[#window.Pages + 1] = page
            return page
        end

        return window
    end
end

return library, utility, obelus

